{"ast":null,"code":"var _jsxFileName = \"C:\\\\git Repos\\\\stuHelp-UI\\\\src\\\\Components\\\\ModalCalender.js\";\n//Problem \n// --> Showing the available Dates for the Professor \n// --> Getting the Dates from the Database showcasing the available dates on the Calender\n// --> Showing the available Timelines for the Available Dates\n// --> Managing the One - One Counselling and the Group Counselling\n// --> Updating the Availability of the Professor according to the Booking Done on the Website \n// --> One-One --> Time slot will be Completely Booked\n// --> Group --> Time Slot will be shown until member limit becomes full\nimport { Component } from \"react\";\nimport Modal from 'react-bootstrap/Modal';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass ModalCalender extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      show: props.show\n    };\n  }\n\n  render() {\n    var today = new Date();\n    var maxDate = new Date();\n    var dd = today.getDate();\n    var maxdd = today.getDate() + 5;\n    var mm = today.getMonth() + 1; //January is 0 so need to add 1 to make it 1!\n\n    var yyyy = today.getFullYear();\n    var timeLines = this.props.availability;\n    const dates = timeLines.map(item => item.date);\n    console.log(\"Dates=\", dates);\n    dates.sort((a, b) => new Date(a) - new Date(b));\n    console.log(\"Dates=\", dates); // const minD = new Date(Math.min(...dates));\n    // const maxD = new Date(Math.max(...dates));\n    // console.log(\"Minimum Date:\", minD);\n    // console.log(\"Maximum Date:\", maxD);\n\n    if (dd < 10) {\n      console.log(\"dd=\" + dd);\n      dd = '0' + dd;\n    }\n\n    if (mm < 10) {\n      console.log(\"dd=\" + mm);\n      mm = '0' + mm;\n    }\n\n    today = yyyy + '-' + mm + '-' + dd;\n    maxDate = yyyy + '-' + mm + '-' + maxdd;\n    const [selectedDate, setSelectedDate] = useState('');\n    const selectedAvailability = timeLines.find(item => item.date === selectedDate);\n\n    const handleDateChange = e => {\n      setSelectedDate(e.target.value);\n    };\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Form.Control, {\n        as: \"select\",\n        value: selectedDate,\n        onChange: handleDateChange,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"Select a date\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this), timeLines.map(item => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: item.date,\n          children: item.date\n        }, item.date, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), selectedAvailability && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: [\"Available Timings for \", selectedDate]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: selectedAvailability.timeSlot.map((time, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: time\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default ModalCalender;","map":{"version":3,"sources":["C:/git Repos/stuHelp-UI/src/Components/ModalCalender.js"],"names":["Component","Modal","Button","Form","Row","Col","React","useState","ModalCalender","constructor","props","state","show","render","today","Date","maxDate","dd","getDate","maxdd","mm","getMonth","yyyy","getFullYear","timeLines","availability","dates","map","item","date","console","log","sort","a","b","selectedDate","setSelectedDate","selectedAvailability","find","handleDateChange","e","target","value","timeSlot","time","index"],"mappings":"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","sourcesContent":["//Problem \r\n// --> Showing the available Dates for the Professor \r\n// --> Getting the Dates from the Database showcasing the available dates on the Calender\r\n// --> Showing the available Timelines for the Available Dates\r\n// --> Managing the One - One Counselling and the Group Counselling\r\n// --> Updating the Availability of the Professor according to the Booking Done on the Website \r\n// --> One-One --> Time slot will be Completely Booked\r\n// --> Group --> Time Slot will be shown until member limit becomes full\r\n\r\nimport { Component } from \"react\";\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport React, { useState } from 'react';\r\n\r\nclass ModalCalender extends Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            show : props.show\r\n        }\r\n    }\r\n\r\n\r\nrender(){\r\n\r\n    var today = new Date();\r\n    var maxDate = new Date();\r\n    var dd = today.getDate();\r\n    var maxdd = today.getDate()+5;\r\n    var mm = today.getMonth() + 1; //January is 0 so need to add 1 to make it 1!\r\n    var yyyy = today.getFullYear();\r\n    var timeLines = this.props.availability;\r\n    const dates = timeLines.map((item) => (item.date));\r\n    console.log(\"Dates=\",dates);\r\n    dates.sort((a, b) => new Date(a) - new Date(b));\r\n    console.log(\"Dates=\",dates);\r\n    // const minD = new Date(Math.min(...dates));\r\n    // const maxD = new Date(Math.max(...dates));\r\n\r\n    // console.log(\"Minimum Date:\", minD);\r\n    // console.log(\"Maximum Date:\", maxD);\r\n\r\n    if (dd < 10) {\r\n        console.log(\"dd=\"+dd);\r\n        dd = '0' + dd\r\n    }\r\n\r\n    if (mm < 10) {\r\n        console.log(\"dd=\"+mm);\r\n        mm = '0' + mm\r\n    }\r\n\r\n    today = yyyy + '-' + mm + '-' + dd;\r\n    maxDate =  yyyy + '-' + mm + '-' + maxdd;\r\n\r\n    const [selectedDate, setSelectedDate] = useState('');\r\n\r\n    const selectedAvailability = timeLines.find(item => item.date === selectedDate);\r\n\r\n    const handleDateChange = (e) => {\r\n        setSelectedDate(e.target.value);\r\n      };\r\n\r\n    return( <div>\r\n        <Form.Control as=\"select\" value={selectedDate} onChange={handleDateChange}>\r\n          <option value=\"\">Select a date</option>\r\n          {timeLines.map((item) => (\r\n            <option key={item.date} value={item.date}>\r\n              {item.date}\r\n            </option>\r\n          ))}\r\n        </Form.Control>\r\n  \r\n        {selectedAvailability && (\r\n          <div>\r\n            <h4>Available Timings for {selectedDate}</h4>\r\n            <ul>\r\n              {selectedAvailability.timeSlot.map((time, index) => (\r\n                <li key={index}>{time}</li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n        )}\r\n      </div>)\r\n}\r\n\r\n}\r\n\r\nexport default ModalCalender;"]},"metadata":{},"sourceType":"module"}