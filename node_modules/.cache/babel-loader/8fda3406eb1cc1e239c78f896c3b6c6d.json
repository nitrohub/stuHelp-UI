{"ast":null,"code":"var _jsxFileName = \"C:\\\\git Repos\\\\stuHelp-UI\\\\src\\\\Components\\\\ModalCalender.js\";\n//Problem \n// --> Showing the available Dates for the Professor \n// --> Getting the Dates from the Database showcasing the available dates on the Calender\n// --> Showing the available Timelines for the Available Dates\n// --> Managing the One - One Counselling and the Group Counselling\n// --> Updating the Availability of the Professor according to the Booking Done on the Website \n// --> One-One --> Time slot will be Completely Booked\n// --> Group --> Time Slot will be shown until member limit becomes full\nimport { Component } from \"react\";\nimport Form from 'react-bootstrap/Form';\nimport Modal from 'react-bootstrap/Modal';\nimport Button from 'react-bootstrap/Button';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass ModalCalender extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleDateChange = e => {\n      this.setState({\n        selectedDate: e.target.value\n      });\n    };\n\n    this.handleTimeChange = e => {\n      this.setState({\n        selectedTime: e.target.value\n      });\n    };\n\n    this.state = {\n      show: props.show,\n      selectedDate: '',\n      selectedTime: ''\n    };\n  }\n\n  timeConverter(timeString) {\n    // Split the time string into hours, minutes, and AM/PM components\n    const [time, period] = timeString.split(\" \");\n    const [hours, minutes] = time.split(\":\"); // Convert the hours to numeric value\n\n    let hoursNumeric = parseInt(hours, 10); // Adjust the hours based on the AM/PM period\n\n    if (period === \"PM\" && hoursNumeric < 12) {\n      hoursNumeric += 12;\n    } else if (period === \"AM\" && hoursNumeric === 12) {\n      hoursNumeric = 0;\n    } // Convert the hours back to string and format it with leading zero if needed\n\n\n    const hoursFormatted = hoursNumeric.toString().padStart(2, \"0\"); // Create the 24-hour time string\n\n    const convertedTime = `${hoursFormatted}:${minutes}`;\n    return convertedTime; // Output: \"12:30\" (in 24-hour format)\n  }\n\n  render() {\n    var timeLines = this.props.availability;\n    const dates = timeLines.map(item => item);\n    console.log(\"Dates=\", dates);\n    dates.sort((a, b) => new Date(a.date) - new Date(b.date));\n    console.log(\"Dates=\", dates);\n    const {\n      selectedDate,\n      selectedTime\n    } = this.state;\n    const {\n      availability,\n      show,\n      onClose,\n      onConfirm\n    } = this.props;\n    const today = new Date();\n    const currentDate = today.toISOString().split('T')[0];\n    const currentTime = today.toLocaleTimeString([], {\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n    const filteredAvailability = availability.filter(item => {\n      const currentDate = new Date(item.date);\n      return currentDate.toISOString().split('T')[0] >= today.toISOString().split('T')[0];\n    });\n    filteredAvailability.forEach(item => {\n      if (item.date == today.toISOString().split('T')[0]) {\n        item.timeSlot = item.timeSlot.filter(timeItem => {\n          const time = timeItem.split(',')[0];\n          console.log(\"Time=\", time);\n          const timeNumeric = parseInt(time, 10); // Convert time to a numeric value\n\n          console.log(\"Time Numberic=\", timeNumeric);\n          console.log(\"CurrentTime = \", currentTime);\n          const currentNumeric = parseInt(timeConverter(currentTime).split(':')[0], 10); // Convert current time to a numeric value\n\n          console.log(\"CurrentNumberic=\", currentNumeric);\n          return timeNumeric > currentNumeric;\n        });\n      }\n    }); //   filteredAvailability = filteredAvailability.map((item)=>{\n    //     item.timeSlot = item.timeSlot.filter((timeItem)=>{\n    //         return timeItem.split(',')[0]>currentTime\n    //     });\n    //   });\n\n    console.log(\"FilteredAvailability on time=\", filteredAvailability); //   const currentTimeSlot = item.timeSlot[0].split(',')[1];\n\n    const selectedAvailability = filteredAvailability.find(item => item.date === selectedDate);\n    return /*#__PURE__*/_jsxDEV(Modal, {\n      show: this.props.show,\n      onHide: this.props.onClose,\n      children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n        closeButton: true,\n        children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n          children: \"Select Date and Time\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n        children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n          controlId: \"formDate\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Select a date:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            as: \"select\",\n            value: selectedDate,\n            onChange: this.handleDateChange,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"Select a date\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 116,\n              columnNumber: 15\n            }, this), filteredAvailability.map(item => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: item.date,\n              children: item.date\n            }, item.date, false, {\n              fileName: _jsxFileName,\n              lineNumber: 118,\n              columnNumber: 17\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 11\n        }, this), selectedAvailability && /*#__PURE__*/_jsxDEV(Form.Group, {\n          controlId: \"formTime\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Select a time:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            as: \"select\",\n            value: this.selectedTime,\n            onChange: this.handleTimeChange,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"Select a time\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 129,\n              columnNumber: 17\n            }, this), selectedAvailability.timeSlot.map((time, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: time,\n              children: time\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 131,\n              columnNumber: 19\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Footer, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          variant: \"secondary\",\n          onClick: this.props.onClose,\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"primary\",\n          disabled: !this.selectedTime,\n          onClick: this.props.onConfirm,\n          children: \"Confirm\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nexport default ModalCalender;","map":{"version":3,"sources":["C:/git Repos/stuHelp-UI/src/Components/ModalCalender.js"],"names":["Component","Form","Modal","Button","ModalCalender","constructor","props","handleDateChange","e","setState","selectedDate","target","value","handleTimeChange","selectedTime","state","show","timeConverter","timeString","time","period","split","hours","minutes","hoursNumeric","parseInt","hoursFormatted","toString","padStart","convertedTime","render","timeLines","availability","dates","map","item","console","log","sort","a","b","Date","date","onClose","onConfirm","today","currentDate","toISOString","currentTime","toLocaleTimeString","hour","minute","filteredAvailability","filter","forEach","timeSlot","timeItem","timeNumeric","currentNumeric","selectedAvailability","find","index"],"mappings":"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","sourcesContent":["//Problem \r\n// --> Showing the available Dates for the Professor \r\n// --> Getting the Dates from the Database showcasing the available dates on the Calender\r\n// --> Showing the available Timelines for the Available Dates\r\n// --> Managing the One - One Counselling and the Group Counselling\r\n// --> Updating the Availability of the Professor according to the Booking Done on the Website \r\n// --> One-One --> Time slot will be Completely Booked\r\n// --> Group --> Time Slot will be shown until member limit becomes full\r\n\r\nimport { Component } from \"react\";\r\nimport Form from 'react-bootstrap/Form';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nclass ModalCalender extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      show: props.show,\r\n      selectedDate: '',\r\n      selectedTime: '',\r\n    };\r\n  }\r\n\r\n  timeConverter(timeString){\r\n\r\n// Split the time string into hours, minutes, and AM/PM components\r\nconst [time, period] = timeString.split(\" \");\r\nconst [hours, minutes] = time.split(\":\");\r\n\r\n// Convert the hours to numeric value\r\nlet hoursNumeric = parseInt(hours, 10);\r\n\r\n// Adjust the hours based on the AM/PM period\r\nif (period === \"PM\" && hoursNumeric < 12) {\r\n  hoursNumeric += 12;\r\n} else if (period === \"AM\" && hoursNumeric === 12) {\r\n  hoursNumeric = 0;\r\n}\r\n\r\n// Convert the hours back to string and format it with leading zero if needed\r\nconst hoursFormatted = hoursNumeric.toString().padStart(2, \"0\");\r\n\r\n// Create the 24-hour time string\r\nconst convertedTime = `${hoursFormatted}:${minutes}`;\r\n\r\nreturn convertedTime; // Output: \"12:30\" (in 24-hour format)\r\n\r\n  }\r\n\r\n\r\n  handleDateChange = (e) => {\r\n    this.setState({ selectedDate: e.target.value });\r\n  };\r\n\r\n  handleTimeChange = (e) => {\r\n    this.setState({ selectedTime: e.target.value });\r\n  };\r\n  render() {\r\n    var timeLines = this.props.availability;\r\n    const dates = timeLines.map((item) => item);\r\n    console.log(\"Dates=\", dates);\r\n    dates.sort((a, b) => new Date(a.date) - new Date(b.date));\r\n    console.log(\"Dates=\", dates);\r\n\r\n    const { selectedDate, selectedTime } = this.state;\r\n    const { availability, show, onClose, onConfirm } = this.props;\r\n\r\n    const today = new Date();\r\n    const currentDate = today.toISOString().split('T')[0];\r\n    const currentTime = today.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\r\n\r\n    const filteredAvailability = availability.filter((item) => {\r\n        const currentDate = new Date(item.date);\r\n        return currentDate.toISOString().split('T')[0] >= today.toISOString().split('T')[0];\r\n      });\r\n\r\n      filteredAvailability.forEach((item) => {\r\n        if (item.date == today.toISOString().split('T')[0]) {\r\n            item.timeSlot = item.timeSlot.filter((timeItem) => {\r\n            const time = timeItem.split(',')[0];\r\n            console.log(\"Time=\",time);\r\n            const timeNumeric = parseInt(time, 10); // Convert time to a numeric value\r\n            console.log(\"Time Numberic=\",timeNumeric);\r\n            console.log(\"CurrentTime = \",currentTime);\r\n            const currentNumeric = parseInt(timeConverter(currentTime).split(':')[0], 10); // Convert current time to a numeric value\r\n            console.log(\"CurrentNumberic=\",currentNumeric);\r\n            return (timeNumeric > currentNumeric);\r\n            });\r\n        }\r\n      });\r\n      \r\n\r\n    //   filteredAvailability = filteredAvailability.map((item)=>{\r\n    //     item.timeSlot = item.timeSlot.filter((timeItem)=>{\r\n    //         return timeItem.split(',')[0]>currentTime\r\n    //     });\r\n    //   });\r\n\r\n      console.log(\"FilteredAvailability on time=\",filteredAvailability );\r\n\r\n    //   const currentTimeSlot = item.timeSlot[0].split(',')[1];\r\n\r\n    const selectedAvailability = filteredAvailability.find((item) => item.date === selectedDate);\r\n\r\n\r\n    return (\r\n        <Modal show={this.props.show} onHide={this.props.onClose}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Select Date and Time</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <Form.Group controlId=\"formDate\">\r\n            <Form.Label>Select a date:</Form.Label>\r\n            <Form.Control as=\"select\" value={selectedDate} onChange={this.handleDateChange}>\r\n              <option value=\"\">Select a date</option>\r\n              {filteredAvailability.map((item) => (\r\n                <option key={item.date} value={item.date}>\r\n                  {item.date}\r\n                </option>\r\n              ))}\r\n            </Form.Control>\r\n          </Form.Group>\r\n\r\n          {selectedAvailability && (\r\n            <Form.Group controlId=\"formTime\">\r\n              <Form.Label>Select a time:</Form.Label>\r\n              <Form.Control as=\"select\" value={this.selectedTime} onChange={this.handleTimeChange}>\r\n                <option value=\"\">Select a time</option>\r\n                {selectedAvailability.timeSlot.map((time, index) => (\r\n                  <option key={index} value={time}>\r\n                    {time}\r\n                  </option>\r\n                ))}\r\n              </Form.Control>\r\n            </Form.Group>\r\n          )}\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"secondary\" onClick={this.props.onClose}>\r\n            Close\r\n          </Button>\r\n          <Button variant=\"primary\" disabled={!this.selectedTime} onClick={this.props.onConfirm}>\r\n            Confirm\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ModalCalender;\r\n"]},"metadata":{},"sourceType":"module"}