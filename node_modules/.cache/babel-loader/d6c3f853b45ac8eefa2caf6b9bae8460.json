{"ast":null,"code":"var _jsxFileName = \"C:\\\\git Repos\\\\stuHelp-UI\\\\src\\\\Components\\\\ModalCalender.js\";\n//Problem \n// --> Showing the available Dates for the Professor \n// --> Getting the Dates from the Database showcasing the available dates on the Calender\n// --> Showing the available Timelines for the Available Dates\n// --> Managing the One - One Counselling and the Group Counselling\n// --> Updating the Availability of the Professor according to the Booking Done on the Website \n// --> One-One --> Time slot will be Completely Booked\n// --> Group --> Time Slot will be shown until member limit becomes full\nimport { Component } from \"react\";\nimport Form from 'react-bootstrap/Form';\nimport Modal from 'react-bootstrap/Modal';\nimport Button from 'react-bootstrap/Button';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass ModalCalender extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleDateChange = e => {\n      this.setState({\n        selectedDate: e.target.value\n      });\n    };\n\n    this.handleTimeChange = e => {\n      this.setState({\n        selectedTime: e.target.value\n      });\n    };\n\n    this.state = {\n      show: props.show,\n      selectedDate: '',\n      selectedTime: ''\n    };\n  }\n\n  render() {\n    var timeLines = this.props.availability;\n    const dates = timeLines.map(item => item);\n    console.log(\"Dates=\", dates);\n    dates.sort((a, b) => new Date(a.date) - new Date(b.date));\n    console.log(\"Dates=\", dates);\n    const {\n      selectedDate,\n      selectedTime\n    } = this.state;\n    const {\n      availability,\n      show,\n      onClose,\n      onConfirm\n    } = this.props;\n    const today = new Date();\n    const currentDate = today.toISOString().split('T')[0];\n    const currentTime = today.toLocaleTimeString([], {\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n    const filteredAvailability = availability.filter(item => {\n      return item.date >= currentDate && (item.date !== currentDate || item.timeSlot[0] >= currentTime);\n    });\n    const selectedAvailability = filteredAvailability.find(item => item.date === selectedDate);\n    return /*#__PURE__*/_jsxDEV(Modal, {\n      show: this.props.show,\n      onHide: this.props.onClose,\n      children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n        closeButton: true,\n        children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n          children: \"Select Date and Time\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n        children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n          controlId: \"formDate\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Select a date:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            as: \"select\",\n            value: selectedDate,\n            onChange: this.handleDateChange,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"Select a date\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 15\n            }, this), filteredAvailability.map(item => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: item.date,\n              children: item.date\n            }, item.date, false, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 17\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this), selectedAvailability && /*#__PURE__*/_jsxDEV(Form.Group, {\n          controlId: \"formTime\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Select a time:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            as: \"select\",\n            value: this.selectedTime,\n            onChange: this.handleTimeChange,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"Select a time\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 75,\n              columnNumber: 17\n            }, this), selectedAvailability.timeSlot.map((time, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: time,\n              children: time\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 19\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Footer, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          variant: \"secondary\",\n          onClick: this.props.onClose,\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"primary\",\n          disabled: !this.selectedTime,\n          onClick: this.props.onConfirm,\n          children: \"Confirm\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nexport default ModalCalender;","map":{"version":3,"sources":["C:/git Repos/stuHelp-UI/src/Components/ModalCalender.js"],"names":["Component","Form","Modal","Button","ModalCalender","constructor","props","handleDateChange","e","setState","selectedDate","target","value","handleTimeChange","selectedTime","state","show","render","timeLines","availability","dates","map","item","console","log","sort","a","b","Date","date","onClose","onConfirm","today","currentDate","toISOString","split","currentTime","toLocaleTimeString","hour","minute","filteredAvailability","filter","timeSlot","selectedAvailability","find","time","index"],"mappings":"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","sourcesContent":["//Problem \r\n// --> Showing the available Dates for the Professor \r\n// --> Getting the Dates from the Database showcasing the available dates on the Calender\r\n// --> Showing the available Timelines for the Available Dates\r\n// --> Managing the One - One Counselling and the Group Counselling\r\n// --> Updating the Availability of the Professor according to the Booking Done on the Website \r\n// --> One-One --> Time slot will be Completely Booked\r\n// --> Group --> Time Slot will be shown until member limit becomes full\r\n\r\nimport { Component } from \"react\";\r\nimport Form from 'react-bootstrap/Form';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nclass ModalCalender extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      show: props.show,\r\n      selectedDate: '',\r\n      selectedTime: '',\r\n    };\r\n  }\r\n\r\n  handleDateChange = (e) => {\r\n    this.setState({ selectedDate: e.target.value });\r\n  };\r\n\r\n  handleTimeChange = (e) => {\r\n    this.setState({ selectedTime: e.target.value });\r\n  };\r\n  render() {\r\n    var timeLines = this.props.availability;\r\n    const dates = timeLines.map((item) => item);\r\n    console.log(\"Dates=\", dates);\r\n    dates.sort((a, b) => new Date(a.date) - new Date(b.date));\r\n    console.log(\"Dates=\", dates);\r\n\r\n    const { selectedDate, selectedTime } = this.state;\r\n    const { availability, show, onClose, onConfirm } = this.props;\r\n\r\n    const today = new Date();\r\n    const currentDate = today.toISOString().split('T')[0];\r\n    const currentTime = today.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\r\n\r\n    const filteredAvailability = availability.filter((item) => {\r\n      return item.date >= currentDate && (item.date !== currentDate || item.timeSlot[0] >= currentTime);\r\n    });\r\n\r\n    const selectedAvailability = filteredAvailability.find((item) => item.date === selectedDate);\r\n\r\n\r\n    return (\r\n        <Modal show={this.props.show} onHide={this.props.onClose}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Select Date and Time</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <Form.Group controlId=\"formDate\">\r\n            <Form.Label>Select a date:</Form.Label>\r\n            <Form.Control as=\"select\" value={selectedDate} onChange={this.handleDateChange}>\r\n              <option value=\"\">Select a date</option>\r\n              {filteredAvailability.map((item) => (\r\n                <option key={item.date} value={item.date}>\r\n                  {item.date}\r\n                </option>\r\n              ))}\r\n            </Form.Control>\r\n          </Form.Group>\r\n\r\n          {selectedAvailability && (\r\n            <Form.Group controlId=\"formTime\">\r\n              <Form.Label>Select a time:</Form.Label>\r\n              <Form.Control as=\"select\" value={this.selectedTime} onChange={this.handleTimeChange}>\r\n                <option value=\"\">Select a time</option>\r\n                {selectedAvailability.timeSlot.map((time, index) => (\r\n                  <option key={index} value={time}>\r\n                    {time}\r\n                  </option>\r\n                ))}\r\n              </Form.Control>\r\n            </Form.Group>\r\n          )}\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"secondary\" onClick={this.props.onClose}>\r\n            Close\r\n          </Button>\r\n          <Button variant=\"primary\" disabled={!this.selectedTime} onClick={this.props.onConfirm}>\r\n            Confirm\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ModalCalender;\r\n"]},"metadata":{},"sourceType":"module"}