{"ast":null,"code":"var _jsxFileName = \"C:\\\\git Repos\\\\stuHelp-UI\\\\src\\\\Components\\\\ModalCalender.js\";\n//Problem \n// --> Showing the available Dates for the Professor \n// --> Getting the Dates from the Database showcasing the available dates on the Calender\n// --> Showing the available Timelines for the Available Dates\n// --> Managing the One - One Counselling and the Group Counselling\n// --> Updating the Availability of the Professor according to the Booking Done on the Website \n// --> One-One --> Time slot will be Completely Booked\n// --> Group --> Time Slot will be shown until member limit becomes full\nimport { Component } from \"react\";\nimport Form from 'react-bootstrap/Form';\nimport Modal from 'react-bootstrap/Modal';\nimport Button from 'react-bootstrap/Button';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass ModalCalender extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleDateChange = e => {\n      this.setState({\n        selectedDate: e.target.value\n      });\n    };\n\n    this.state = {\n      show: props.show,\n      selectedDate: ''\n    };\n  }\n\n  render() {\n    var today = new Date();\n    var maxDate = new Date();\n    var dd = today.getDate();\n    var maxdd = today.getDate() + 5;\n    var mm = today.getMonth() + 1; //January is 0 so need to add 1 to make it 1!\n\n    var yyyy = today.getFullYear();\n    var timeLines = this.props.availability;\n    const dates = timeLines.map(item => item);\n    console.log(\"Dates=\", dates);\n    dates.sort((a, b) => new Date(a.date) - new Date(b.date));\n    console.log(\"Dates=\", dates);\n    const {\n      selectedDate\n    } = this.state;\n    const selectedAvailability = timeLines.find(item => item.date === selectedDate);\n    return /*#__PURE__*/_jsxDEV(Modal, {\n      show: show,\n      onHide: this.props.onClose,\n      children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n        closeButton: true,\n        children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n          children: \"Select Date and Time\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n        children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n          controlId: \"formDate\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Select a date:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            as: \"select\",\n            value: selectedDate,\n            onChange: this.handleDateChange,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"Select a date\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 53,\n              columnNumber: 15\n            }, this), availability.map(item => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: item.date,\n              children: item.date\n            }, item.date, false, {\n              fileName: _jsxFileName,\n              lineNumber: 55,\n              columnNumber: 17\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }, this), selectedAvailability && /*#__PURE__*/_jsxDEV(Form.Group, {\n          controlId: \"formTime\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Select a time:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            as: \"select\",\n            value: selectedTime,\n            onChange: this.handleTimeChange,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"Select a time\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 17\n            }, this), selectedAvailability.timeSlot.map((time, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: time,\n              children: time\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 19\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Footer, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          variant: \"secondary\",\n          onClick: this.props.onClose,\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"primary\",\n          disabled: !selectedTime,\n          onClick: this.props.onConfirm,\n          children: \"Confirm\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nexport default ModalCalender;","map":{"version":3,"sources":["C:/git Repos/stuHelp-UI/src/Components/ModalCalender.js"],"names":["Component","Form","Modal","Button","ModalCalender","constructor","props","handleDateChange","e","setState","selectedDate","target","value","state","show","render","today","Date","maxDate","dd","getDate","maxdd","mm","getMonth","yyyy","getFullYear","timeLines","availability","dates","map","item","console","log","sort","a","b","date","selectedAvailability","find","onClose","selectedTime","handleTimeChange","timeSlot","time","index","onConfirm"],"mappings":"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","sourcesContent":["//Problem \r\n// --> Showing the available Dates for the Professor \r\n// --> Getting the Dates from the Database showcasing the available dates on the Calender\r\n// --> Showing the available Timelines for the Available Dates\r\n// --> Managing the One - One Counselling and the Group Counselling\r\n// --> Updating the Availability of the Professor according to the Booking Done on the Website \r\n// --> One-One --> Time slot will be Completely Booked\r\n// --> Group --> Time Slot will be shown until member limit becomes full\r\n\r\nimport { Component } from \"react\";\r\nimport Form from 'react-bootstrap/Form';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nclass ModalCalender extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      show: props.show,\r\n      selectedDate: ''\r\n    };\r\n  }\r\n\r\n  handleDateChange = (e) => {\r\n    this.setState({ selectedDate: e.target.value });\r\n  };\r\n\r\n  render() {\r\n    var today = new Date();\r\n    var maxDate = new Date();\r\n    var dd = today.getDate();\r\n    var maxdd = today.getDate() + 5;\r\n    var mm = today.getMonth() + 1; //January is 0 so need to add 1 to make it 1!\r\n    var yyyy = today.getFullYear();\r\n    var timeLines = this.props.availability;\r\n    const dates = timeLines.map((item) => item);\r\n    console.log(\"Dates=\", dates);\r\n    dates.sort((a, b) => new Date(a.date) - new Date(b.date));\r\n    console.log(\"Dates=\", dates);\r\n\r\n    const { selectedDate } = this.state;\r\n    const selectedAvailability = timeLines.find((item) => item.date === selectedDate);\r\n\r\n    return (\r\n        <Modal show={show} onHide={this.props.onClose}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Select Date and Time</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <Form.Group controlId=\"formDate\">\r\n            <Form.Label>Select a date:</Form.Label>\r\n            <Form.Control as=\"select\" value={selectedDate} onChange={this.handleDateChange}>\r\n              <option value=\"\">Select a date</option>\r\n              {availability.map((item) => (\r\n                <option key={item.date} value={item.date}>\r\n                  {item.date}\r\n                </option>\r\n              ))}\r\n            </Form.Control>\r\n          </Form.Group>\r\n\r\n          {selectedAvailability && (\r\n            <Form.Group controlId=\"formTime\">\r\n              <Form.Label>Select a time:</Form.Label>\r\n              <Form.Control as=\"select\" value={selectedTime} onChange={this.handleTimeChange}>\r\n                <option value=\"\">Select a time</option>\r\n                {selectedAvailability.timeSlot.map((time, index) => (\r\n                  <option key={index} value={time}>\r\n                    {time}\r\n                  </option>\r\n                ))}\r\n              </Form.Control>\r\n            </Form.Group>\r\n          )}\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"secondary\" onClick={this.props.onClose}>\r\n            Close\r\n          </Button>\r\n          <Button variant=\"primary\" disabled={!selectedTime} onClick={this.props.onConfirm}>\r\n            Confirm\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ModalCalender;\r\n"]},"metadata":{},"sourceType":"module"}